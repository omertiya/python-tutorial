class Car:

    def __init__(self,make,model,year,color):
        self.make=make
        self.model=model
        self.year=year
        self.color=color


    def about(self):
        print("this car is "+self.make+" ,model :"+self.model+" "+str(self.year)+" "+self.color+" color")

    def drive(self):
        print("this "+self.model +" is driving")

    def stop(self):
        print("this "+self.model+" is stop")

from car import Car

car_1=Car("chevy","corvrttr",2021,"blue")
car_2=Car("Ford","Mustang",2022,"red")

car_1.about()
car_1.drive()
car_1.stop()

car_2.about()
car_2.drive()
car_2.stop()


"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
this car is chevy ,model :corvrttr 2021 blue color
this corvrttr is driving
this corvrttr is stop
this car is Ford ,model :Mustang 2022 red color
this Mustang is driving
this Mustang is stop

Process finished with exit code 0
#
#
CLASS VARIABLE
#
class Car:
    wheel=4  #class variable

    def __init__(self,make,model,year,color):
        self.make=make     #instance variable
        self.model=model   #instance variable
        self.year=year     #instance variable
        self.color=color   #instance variable


from car import Car

car_1=Car("chevy","corvrttr",2021,"blue")
car_2=Car("Ford","Mustang",2022,"red")

car_1.wheel=2

print(car_1.wheel)
print(car_2.wheel)
print(Car.wheel)
Car.wheel=3
print(Car.wheel)

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
2
4
4
3

Process finished with exit code 0



INHERITING

class Animal:
    alive=True

    def eat(self):
        print("This animal is eating")

    def sleep(self):
        print("This animal is sleeping")

class Rabbit(Animal):
    def run(self):
        print("this rabbit is running")

class Fish(Animal):
    def swim(self):
        print("this fish is swimming")

class Hawk(Animal):
    def fly(self):
        print("this hawk is flying")

rabbit=Rabbit()
fish=Fish()
hawk=Hawk()


print(rabbit.alive)
rabbit.eat()
rabbit.sleep()
rabbit.run()

print(fish.alive)
fish.eat()
fish.sleep()
fish.swim()

print(hawk.alive)
hawk.eat()
hawk.sleep()
hawk.fly()

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
True
This animal is eating
This animal is sleeping
this rabbit is running
True
This animal is eating
This animal is sleeping
this fish is swimming
True
This animal is eating
This animal is sleeping
this hawk is flying

Process finished with exit code 0


MULTI LEVEL INHERITANCE
multi-level inheritance = when a derived (child) class inherits another derived (child) class

class Organism:

    alive=True

class Animal(Organism):

    def eat(self):
        print("This animal is eating")

class Dog(Animal):
    def bark(self):
        print("This dog is barking")

dog=Dog()

print(dog.alive)
dog.eat()
dog.bark()


"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
True
This animal is eating
This dog is barking

Process finished with exit code 0


MULTIPLE INHERITANCE
multiple ingeritance = when a child class is derived form more than one parent class

class Prey:

    def flee(self):
        print("this animal flees")

class Predator:

    def hant(self):
        print("this animal is hunting")


class Rabbit(Prey):
    pass

class Hawk(Predator):
    pass

class Fish(Prey,Predator):
    pass


rabbit=Rabbit()
hawk=Hawk()
fish=Fish()

rabbit.flee()
hawk.hant()
fish.flee()
fish.hant()

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
this animal flees
this animal is hunting
this animal flees
this animal is hunting

Process finished with exit code 0

class Animal:
    def eat(self):
        print("this animal is eating")

class Rabbit(Animal):
    def eat(self):
        print("this rabbit is eating a carrot")

rabbit=Rabbit()
rabbit.eat()


"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
this animal is eating
this rabbit is eating a carrot

Process finished with exit code 0


METHOD CHAINING
method chaining = calling multiple methods sequentially
                  each call performs an action on the same object and returns delf

class Car:
    def turn_on(self):
        print("you start the engine")
        return self
    def drive(self):
        print("you drive the car")
        return self
    def brake(self):
        print("you step in the brakes")
        return self
    def turn_off(self):
        print("you turn off the engine")
        return self

car=Car()

car.turn_on().drive().brake().turn_off()


"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
you start the engine
you drive the car
you step in the brakes
you turn off the engine

Process finished with exit code 0

SUPER()
super() = function used to give access to the methods of a parent class.
          returns a temporary opject of a parent clas when used


class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

class Square(Rectangle):
    def __init__(self,length,width):
        super().__init__(length,width)
    def area(self):
        return self.width*self.width

class Cube(Rectangle):
    def __init__(self,length,width,height):
        super().__init__(length,width)
        self.height=height
    def volume(self):
        return self.length*self.width*self.height

square=Square(3,3)
cube=Cube(3,3,3)

print(square.area())
print(cube.volume())

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
9
27

Process finished with exit code 0

ABSTRACT CLASS
prevents a user from creating an object of that class
+ comels a user to override abstravt mothods in a child class

abstract class = a class which contains ome or more abstract mothods
abstract method = a method that has a declaration but dose not have an implementation

from abc import ABC,abstractmethod
class Vahicle(ABC):
    @abstractmethod
    def go(self):
        pass

    @abstractmethod
    def stop(self):
        pass

class Car(Vahicle):
    def go(self):
        print("you drive the car")

    def stop(self):
        print("this car is stop")

class Motorcycle(Vahicle):
    def go(self):
        print("you ride the motorcycle")

    def stop(self):
        print("you stop the motorcycle")



#vehicle=Vahicle()
car=Car()
motorcycle=Motorcycle()

vehicle.go()
car.go()
car.stop()

motorcycle.go()
motorcycle.stop()

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
you drive the car
this car is stop
you ride the motorcycle
you stop the motorcycle

Process finished with exit code 0


class Car:
    color=None

class Motorcycle:
    color=None


def change_color(vehicle,color):
    vehicle.color=color

car_1=Car()
car_2=Car()
car_3=Car()

motorcycle=Motorcycle()

change_color(car_1,"red")
change_color(car_2,"green")
change_color(car_3,"black")

change_color(motorcycle,"blue")

print(car_1.color)
print(car_2.color)
print(car_3.color)

print(motorcycle.color)

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
red
green
black
blue

Process finished with exit code 0


DOCK TYPING
duck typing = concept where tha class of an object is less important  then the methods/attributes
              class type in not checked if minimum methode/attributes are present
              (if it walks like a duck, and it quacks like a duck, then it must be a duck)


class Duck:
    def walk(self):
        print("this duck is walking")

    def talk(self):
        print("this duck is qwuacking")


class Chicken:
    def walk(self):
        print("this chicken is walking")

    def talk(self):
        print("this chicken is clucking")

class Person():
    def catch(self,duck):
        duck.walk()
        duck.talk()
        print("you caught the critter")


duck=Duck()
chicken=Chicken()
person=Person()


person.catch(duck)
print()
person.catch(chicken)

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
this duck is walking
this duck is qwuacking
you caught the critter

this chicken is walking
this chicken is clucking
you caught the critter

Process finished with exit code 0



WALRUS OPERATOR :=

new to python 3.8
assignment expression aka walrus operator
assigns value to varibles as part of a larger expression

happy=True
print(happy)

print(happy:=True)


"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
True
True

Process finished with exit code 0




foods=list()
while True:
    food=input("what food do you like?: ")
    if food == "quit":
        break
    else:
        foods.append(food)


foods=list()
while food:=input("what food fo you like?: ") != "quit":
    foods.append(food)




"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
what food do you like?: pizza
what food do you like?: sushi
what food do you like?: ice cream
what food do you like?: quit

Process finished with exit code 0





def hello():
    print("hello")

print(hello)

hi=hello
print(hi)

hello()
hi()

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
<function hello at 0x000000154BE0BDC0>
<function hello at 0x000000154BE0BDC0>
hello
hello

Process finished with exit code 0


say=print
say("i can print use say")

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
i can print use say

Process finished with exit code 0






HIGHER ORDER FUNCTION
higher order function = a function that either:
                         1.accepts a function as an argument
                         2.returns a function
                         (in python , functions are also treated as opjects)


def loud(text):
    return text.upper()

def quiet(text):
    return text.lower()

def hello(func):
    text=func("hello")
    print(text)


hello(loud)
hello(quiet)

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
HELLO
hello

Process finished with exit code 0



def divisor(x):
    def dividend(y):
        return y/x
    return dividend


divid=divisor(2)
print(divid(10))

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
5.0

Process finished with exit code 0



LAMBDA FUNCTION
lambda function = function wrtten in 1 line using lambda keywoed
                  accepts any number of arguments, but only hase one expression.
                  (think of it as a shortcut)
                  (useful if needed for a short period of time, throw-away)

lambda parameters : experession


def double(x):
    return x*2

double=lambda x:x*2
print(double(5))

multiply=lambda x,y:x*y
print(multiply(5,5))

add=lambda x,y,z:x+y+z
print(add(5,5,5))

full_name=lambda first_name,last_name:first_name+" "+last_name
print(full_name("omer","tiya"))

age_check=lambda age:True if age>=18 else False
print(age_check(15))
print(age_check(19))

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
10
25
15
omer tiya
False
True

Process finished with exit code 0


 SORT
sort() method = used with lists
sort() function = used with iterables

students=["Squidward","Sandy","Patrick","Spongebob","Mr,Krabs"]
students.sort(reverse=True)
for i in students:
    print(i)

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
Mr,Krabs
Patrick
Sandy
Spongebob
Squidward

Process finished with exit code 0

students=("Squidward","Sandy","Patrick","Spongebob","Mr,Krabs")
sorted_student=sorted(students,reverse=True)
for i in sorted_student:
    print(i)

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
Mr,Krabs
Patrick
Sandy
Spongebob
Squidward

Process finished with exit code 0


students= [("Squidward","F",60),
           ("Sandy","A",33),
           ("Patrick","D",36),
           ("Spongebob","B",20),
           ("Mr.Krabe","C",78)]

students.sort(key=lambda x:x[2])
for i in students:
       print(i)


"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
('Spongebob', 'B', 20)
('Sandy', 'A', 33)
('Patrick', 'D', 36)
('Squidward', 'F', 60)
('Mr.Krabe', 'C', 78)

Process finished with exit code 0


students= (("Squidward","F",60),
           ("Sandy","A",33),
           ("Patrick","D",36),
           ("Spongebob","B",20),
           ("Mr.Krabe","C",78))


sorted_students=sorted(students,key=lambda x:x[1])
for i in sorted_students:
    print(i)

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
('Sandy', 'A', 33)
('Spongebob', 'B', 20)
('Mr.Krabe', 'C', 78)
('Patrick', 'D', 36)
('Squidward', 'F', 60)

Process finished with exit code 0


MAP
map() = applies a funtion to each item in an iterable (lisr, tuple, etc)
map(function,iterable)

stor=[("shirt",20.00),
      ("pants",25.00),
      ("jacket",50.00),
      ("socks",10.00)]

to_euros=lambda data:(data[0],data[1]*0.82)
stor_eutos=map(to_euros,stor)

for i in stor_eutos:
    print(i)

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
('shirt', 16.4)
('pants', 20.5)
('jacket', 41.0)
('socks', 8.2)

Process finished with exit code 0


FILTER
FILTER() = creates a collection of element from an iterable for which a function returns
filter(function, iterable)

friends={("Rachel",19),
         ("Monica",18),
         ("Phoebe",17),
         ("Joey",16),
         ("Chandler",21),
         ("Ross",20)}

age=lambda data:data[1]>=18

drinking_baddies=filter(age,friends)

for i in drinking_baddies:
    print(i)

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
('Rachel', 19)
('Monica', 18)
('Ross', 20)
('Chandler', 21)

Process finished with exit code 0



REDUCE
reduce()= apply a function to an iterable and reduce it to a single coumulative value.
          performs function on first two elements and repeats process until 1 value remains
reduce(function,iterable)

import functools
letters=["h","e","l","l","o"]
word=functools.reduce(lambda x,y:x+y,letters)
print(word)

factorial=[5,4,3,2,1]
result=functools.reduce(lambda x,y:x*y,factorial)
print(result)


"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
hello
120

Process finished with exit code 0

LIST COMREHAENSION
list comprehebsion = a way to create a new list with lesw syntax
                     can minic certain lambda functios,easier to read
 list=[experssion for item in iterable]
 list=[experssion for item in iterable if conditional]
 list=[expression if/else for item in iterable]


squares=[]                  #create an empty list
for i in range(1,11):       #create a for loop
    squares.append(i*i)     #define what each loop iteration should do
print(squares)

squares=[i*i for i in range(1,11)]
print(squares)

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

Process finished with exit code 0

students=[100,90,80,70,60,50,40,30,0]

passed_student=list(filter(lambda x:x>=60,students))
print(passed_student)

passed_student=[i for i in students if i>=60]
print(passed_student)

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
[100, 90, 80, 70, 60]
[100, 90, 80, 70, 60]

Process finished with exit code 0

students=[100,90,80,70,60,50,40,30,0]

pass_student=[i if i>= 60 else "fille" for i in students]
print(pass_student)

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
[100, 90, 80, 70, 60, 'fille', 'fille', 'fille', 'fille']

Process finished with exit code 0




DICTIONARY COMPERHENSION
dictionary comperhenstion = create dictionaries using an expersssion
                            can replace for loops and certain lambda function

dictionary = {key:expression for (key,value) in iterable}
dictionary = {key:experssion for (key,value) in iterable if conditional}
dictionary = {key:( if / else ) for (key,value) in iterable}
dictionary = {key: function(value) for (key,vlaue) in iterable}

cities_in_F={"New york":32,"Boston":75,"Los Angeles":100,"Ch icago":50}
cities_in_C={key: round((value-32)*(5/9))for (key,value)in cities_in_F.items()}
print(cities_in_C)

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
{'New york': 0, 'Boston': 24, 'Los Angeles': 38, 'Chaicago': 10}

Process finished with exit code 0


weather={"New york":"snowing","Boston":"sunny","Los Angeles":"sunny","Chicago":"cloudy"}
sunny_weather={key:value for (key,value) in weather.items() if value == "sunny"}
print(sunny_weather)

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
{'Boston': 'sunny', 'Los Angeles': 'sunny'}

Process finished with exit code 0


cities={"New york":32,"Boston":75,"Los Angeles":100,"Ch icago":50}
desc_cities={key:("worm"if value>=40 else "cold") for (key,value) in cities.items()}
print(desc_cities)
"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
{'New york': 'cold', 'Boston': 'worm', 'Los Angeles': 'worm', 'Ch icago': 'worm'}

Process finished with exit code 0


def check_temp(value):
    if value>=70:
        return "hot"
    elif 96 >= value >=40:
        return "warm"
    else:
        return "cold"

cities={"New york":32,"Boston":75,"Los Angeles":100,"Ch icago":50}
desc_cities={key:check_temp(value) for (key,value) in cities.items()}

print(desc_cities)


"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
{'New york': 'cold', 'Boston': 'hot', 'Los Angeles': 'hot', 'Ch icago': 'warm'}

Process finished with exit code 0



ZIP (*ITERABLES) = aggregate elements from two or more iterables (list, tuples, sets, etc)
                   creates a zip object with paired elements stored om tuples for each elements

usernames=["Dude","Bro","Mister"]
passwords=("p@ssword","abc123","guest")
user=list(zip(usernames,passwords))
print(user)




"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
[('Dude', 'p@ssword'), ('Bro', 'abc123'), ('Mister', 'guest')]

Process finished with exit code 0



user=dict(zip(usernames,passwords))
print(type(user))
for key,value in user.items():
    print(key+" : "+value)


"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
<class 'dict'>
Dude : p@ssword
Bro : abc123
Mister : guest

Process finished with exit code 0



usernames=["Dude","Bro","Mister"]
passwords=("p@ssword","abc123","guest")
login_date=["1/1/2020","1/5/2021","1/8/2022"]

user=zip(usernames, passwords, login_date)

for i in user:
    print(i)

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
('Dude', 'p@ssword', '1/1/2020')
('Bro', 'abc123', '1/5/2021')
('Mister', 'guest', '1/8/2022')

Process finished with exit code 0

*****************************
if __name__=="__name__"
******************************

python interpreter sets (special variables), one of which is __name__
python will assign the __name__ variable a value of "__main__" if it's
the initial module being run

y tho?
1.Module can be run as a standalone program
2.Module can be imported and used by other modules

python interpreter sets (special variables), one of which is __name__
the python will execute the code found within __main__


import car
print(__name__)
print(car.__name__)


if __name__=="__main__":
    print("running this module directly")
else:
    print("running other module indirectly")

"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/car.py"
main
main
car
running this module directly
running other module indirectly

Process finished with exit code 0

def hello():
    print("hello")

if __name__=="__main__":
    hello()


"F:\omer_tiya python book\py_book projacet\main_py_book\main\main_py_book\Scripts\python.exe" "F:/omer_tiya python book/py_book projacet/main_py_book/main/main.py"
hello

Process finished with exit code 0
